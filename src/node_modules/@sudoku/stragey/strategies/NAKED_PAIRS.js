export const NAKED_PAIRS = {
    name: '显性数对',
    description: '当两个单元格的候选数完全相同且只有两个数字时，这两个数字只能出现在这两个位置，可以从同行/列/宫的其他单元格中删除这两个数字',
    
    // 检查策略是否适用
    async check(grid) {
        const result = await this.effect(grid);
        return result.length > 0 ? {
            hasChanges: () => true,
            strategy: this,
            description: this.description
        } : null;
    },

    effect: (grid) => {
        const changes = [];
        const candidatesMap = {};

        // 获取所有单元格的候选数
        for (let row = 0; row < 9; row++) {
            for (let col = 0; col < 9; col++) {
                if (grid[row][col] === 0) {
                    const candidates = [];
                    for (let num = 1; num <= 9; num++) {
                        let canPlace = true;
                        // 检查行
                        for (let x = 0; x < 9; x++) {
                            if (grid[row][x] === num) {
                                canPlace = false;
                                break;
                            }
                        }
                        // 检查列
                        if (canPlace) {
                            for (let y = 0; y < 9; y++) {
                                if (grid[y][col] === num) {
                                    canPlace = false;
                                    break;
                                }
                            }
                        }
                        // 检查3x3方格
                        if (canPlace) {
                            const boxRow = Math.floor(row / 3) * 3;
                            const boxCol = Math.floor(col / 3) * 3;
                            for (let y = boxRow; y < boxRow + 3; y++) {
                                for (let x = boxCol; x < boxCol + 3; x++) {
                                    if (grid[y][x] === num) {
                                        canPlace = false;
                                        break;
                                    }
                                }
                                if (!canPlace) break;
                            }
                        }
                        if (canPlace) {
                            candidates.push(num);
                        }
                    }
                    if (candidates.length === 2) {
                        candidatesMap[`${row},${col}`] = candidates;
                    }
                }
            }
        }

        // 检查行中的数对
        for (let row = 0; row < 9; row++) {
            const rowPairs = [];
            for (let col = 0; col < 9; col++) {
                const key = `${row},${col}`;
                if (candidatesMap[key]) {
                    rowPairs.push({ col, candidates: candidatesMap[key] });
                }
            }
            // 查找数对
            for (let i = 0; i < rowPairs.length; i++) {
                for (let j = i + 1; j < rowPairs.length; j++) {
                    if (rowPairs[i].candidates.toString() === rowPairs[j].candidates.toString()) {
                        const pair = rowPairs[i].candidates;
                        // 从同行其他单元格删除这两个数字
                        for (let col = 0; col < 9; col++) {
                            if (col !== rowPairs[i].col && col !== rowPairs[j].col) {
                                const key = `${row},${col}`;
                                if (candidatesMap[key]) {
                                    pair.forEach(num => {
                                        if (candidatesMap[key].includes(num)) {
                                            changes.push({
                                                row,
                                                col,
                                                value: num,
                                                type: 'remove_candidate'
                                            });
                                        }
                                    });
                                }
                            }
                        }
                    }
                }
            }
        }

        // 检查列中的数对
        for (let col = 0; col < 9; col++) {
            const colPairs = [];
            for (let row = 0; row < 9; row++) {
                const key = `${row},${col}`;
                if (candidatesMap[key]) {
                    colPairs.push({ row, candidates: candidatesMap[key] });
                }
            }
            // 查找数对
            for (let i = 0; i < colPairs.length; i++) {
                for (let j = i + 1; j < colPairs.length; j++) {
                    if (colPairs[i].candidates.toString() === colPairs[j].candidates.toString()) {
                        const pair = colPairs[i].candidates;
                        // 从同列其他单元格删除这两个数字
                        for (let row = 0; row < 9; row++) {
                            if (row !== colPairs[i].row && row !== colPairs[j].row) {
                                const key = `${row},${col}`;
                                if (candidatesMap[key]) {
                                    pair.forEach(num => {
                                        if (candidatesMap[key].includes(num)) {
                                            changes.push({
                                                row,
                                                col,
                                                value: num,
                                                type: 'remove_candidate'
                                            });
                                        }
                                    });
                                }
                            }
                        }
                    }
                }
            }
        }

        // 检查宫中的数对
        for (let boxIndex = 0; boxIndex < 9; boxIndex++) {
            const boxRow = Math.floor(boxIndex / 3) * 3;
            const boxCol = (boxIndex % 3) * 3;
            const boxPairs = [];
            
            for (let i = 0; i < 3; i++) {
                for (let j = 0; j < 3; j++) {
                    const row = boxRow + i;
                    const col = boxCol + j;
                    const key = `${row},${col}`;
                    if (candidatesMap[key]) {
                        boxPairs.push({ row, col, candidates: candidatesMap[key] });
                    }
                }
            }
            
            // 查找数对
            for (let i = 0; i < boxPairs.length; i++) {
                for (let j = i + 1; j < boxPairs.length; j++) {
                    if (boxPairs[i].candidates.toString() === boxPairs[j].candidates.toString()) {
                        const pair = boxPairs[i].candidates;
                        // 从同宫其他单元格删除这两个数字
                        for (let y = boxRow; y < boxRow + 3; y++) {
                            for (let x = boxCol; x < boxCol + 3; x++) {
                                if ((y !== boxPairs[i].row || x !== boxPairs[i].col) && 
                                    (y !== boxPairs[j].row || x !== boxPairs[j].col)) {
                                    const key = `${y},${x}`;
                                    if (candidatesMap[key]) {
                                        pair.forEach(num => {
                                            if (candidatesMap[key].includes(num)) {
                                                changes.push({
                                                    row: y,
                                                    col: x,
                                                    value: num,
                                                    type: 'remove_candidate'
                                                });
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return changes;
    }
}; 