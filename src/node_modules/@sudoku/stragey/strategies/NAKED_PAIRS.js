import { BaseStrategy, StrategyExecutor } from './base';

class NakedPairsStrategy extends BaseStrategy {
    constructor() {
        super(
            'NAKED_PAIRS',
            '显性数对',
            '当两个单元格的候选数完全相同且只有两个数字时，这两个数字只能出现在这两个位置，可以从同行/列/宫的其他单元格中删除这两个数字'
        );
        
        this.executor = new StrategyExecutor({
            scanRows: true,
            scanCols: true,
            scanBoxes: true
        });
    }

    async apply(grid) {
        const result = this.createResult();
        
        await this.executor.execute(grid, async (cells, grid) => {
            const candidatesMap = new Map();
            
            // 收集所有有两个候选数的单元格
            for (const pos of cells) {
                if (this.isSolved(grid, pos)) continue;
                
                const candidates = this.getCandidates(grid, pos);
                if (candidates.length === 2) {
                    const key = candidates.sort().join(',');
                    if (!candidatesMap.has(key)) {
                        candidatesMap.set(key, []);
                    }
                    candidatesMap.get(key).push(pos);
                }
            }

            // 检查是否有数对
            for (const [candidatesKey, positions] of candidatesMap) {
                if (positions.length === 2) {
                    const candidates = candidatesKey.split(',').map(Number);
                    const [pos1, pos2] = positions;
                    
                    // 高亮数对
                    result.addHighlight(pos1, candidates);
                    result.addHighlight(pos2, candidates);
                    
                    // 从其他单元格中删除这两个数字
                    for (const pos of cells) {
                        if (pos === pos1 || pos === pos2) continue;
                        if (this.isSolved(grid, pos)) continue;
                        
                        const cellCandidates = this.getCandidates(grid, pos);
                        const eliminatedCandidates = cellCandidates.filter(n => candidates.includes(n));
                        
                        if (eliminatedCandidates.length > 0) {
                            result.addElimination(pos, eliminatedCandidates);
                        }
                    }
                }
            }
        });

        return result.hasChanges() ? result : null;
    }
}

export default NakedPairsStrategy; 