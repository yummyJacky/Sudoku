import { BaseStrategy, StrategyExecutor } from './base';

class NakedSingleStrategy extends BaseStrategy {
    constructor() {
        super(
            'NAKED_SINGLE',
            '唯一候选数',
            '如果一个单元格只有一个候选数，那么这个候选数就是该单元格的解'
        );
        
        // 配置扫描方式
        this.executor = new StrategyExecutor({
            scanRows: true,
            scanCols: false,
            scanBoxes: false
        });
    }

    async apply(grid) {
        const result = this.createResult();
        
        await this.executor.execute(grid, async (cells, grid) => {
            for (const pos of cells) {
                if (this.isSolved(grid, pos)) continue;
                
                const candidates = this.getCandidates(grid, pos);
                if (candidates.length === 1) {
                    result.addHighlight(pos, candidates);
                    // 在这里我们可以直接设置值，或者只是返回建议
                    result.addElimination(pos, candidates);
                }
            }
        });

        return result.hasChanges() ? result : null;
    }
}

export default NakedSingleStrategy; 