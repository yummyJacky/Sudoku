// 添加Hidden Single策略的实现
export const HiddenSingleStrategy = {
    // 遍历某一行、列或宫格，查找Hidden Single
    findHiddenSingles (grid, candidatesMap) {
        const hiddenSingles = new Set() // 使用Set避免重复
        // console.log('开始查找Hidden Singles...');

        // 遍历所有行、列和宫格
        for (let unitType of ["row", "col", "box"]) {
            for (let index = 0; index < 9; index++) {
                // console.log(`检查${unitType} ${index}`);
                const cells = this.getUnitCells(grid, unitType, index, candidatesMap)
                const candidateOccurrences = this.countCandidateOccurrences(cells)

                // console.log('候选数出现次数:', candidateOccurrences);

                // 找到出现次数为1的候选数字，并记录
                for (let [candidate, count] of Object.entries(candidateOccurrences)) {
                    if (count === 1) {
                        // console.log(`在${unitType} ${index}中找到Hidden Single: 数字${candidate}`);
                        const targetCell = cells.find(cell =>
                            cell.candidates.includes(Number(candidate))
                        )
                        if (targetCell) {
                            // console.log(`位置: 行${targetCell.row}, 列${targetCell.col}`);
                            const key = JSON.stringify({
                                row: targetCell.row,
                                col: targetCell.col,
                                candidate: Number(candidate)
                            })
                            hiddenSingles.add(key)
                        }
                    }
                }
            }
        }

        const result = Array.from(hiddenSingles).map(key => JSON.parse(key))
        // console.log('找到的所有Hidden Singles:', result);
        return result
    },

    // 获取某一行、列或宫格的格子
    getUnitCells (grid, unitType, index, candidatesMap) {
        const cells = []
        for (let i = 0; i < 9; i++) {
            let row, col

            if (unitType === "row") {
                row = index
                col = i
            } else if (unitType === "col") {
                row = i
                col = index
            } else if (unitType === "box") {
                row = Math.floor(index / 3) * 3 + Math.floor(i / 3)
                col = (index % 3) * 3 + (i % 3)
            }

            const key = `${col},${row}`
            if (candidatesMap[key]) {
                cells.push({
                    key,
                    row,
                    col,
                    candidates: candidatesMap[key]
                })
            }
        }
        return cells
    },

    // 统计某区域中每个候选数字出现的次数
    countCandidateOccurrences (cells) {
        const occurrences = {}
        for (let cell of cells) {
            const candidates = cell.candidates
            if (candidates) {
                for (let candidate of candidates) {
                    occurrences[candidate] = (occurrences[candidate] || 0) + 1
                }
            }
        }
        return occurrences
    }
}
export const HIDDEN_SINGLE = {
    name: '隐单值',
    description: '如果在某个区域（行、列或宫）中，某个数字只能放在一个位置，那么这个数字就是该位置的解',
    
    // 检查策略是否适用
    async check(grid) {
        const result = await this.effect(grid);
        return result.length > 0 ? {
            hasChanges: () => true,
            strategy: this,
            description: this.description
        } : null;
    },

    effect: (grid) => {
        // console.log('执行Hidden Single策略...');
        // 获取候选数映射
        const candidatesMap = {}
        for (let row = 0; row < 9; row++) {
            for (let col = 0; col < 9; col++) {
                if (grid[row][col] === 0) {
                    const key = `${col},${row}`
                    candidatesMap[key] = CandidateManager.getCandidates(grid, row, col)
                }
            }
        }
        // console.log('当前候选数映射:', candidatesMap);

        const changes = []
        const hiddenSingles = HiddenSingleStrategy.findHiddenSingles(grid, candidatesMap)

        // console.log('准备应用变更...');
        for (const hiddenSingle of hiddenSingles) {
            // console.log('处理Hidden Single:', hiddenSingle);
            changes.push({
                type: 'highlight_candidate',
                row: hiddenSingle.row,
                col: hiddenSingle.col,
                digit: hiddenSingle.candidate,
                highlightType: 'eliminated'
            })
        }

        // console.log('返回的变更:', changes);
        return changes
    }
}