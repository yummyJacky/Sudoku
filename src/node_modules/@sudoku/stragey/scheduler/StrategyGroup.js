/**
 * 策略分析单元类
 * 用于存储策略分析的结果，包括受影响的点位和需要删除的候选数
 */
export class StrategyGroup {
    /**
     * @param {string} name - 策略组名称
     * @param {string} description - 策略组描述
     */
    constructor(name, description = '') {
        this.groupName = name;
        this.description = description;
        // 使用Set存储点位，避免重复
        this.points = new Set();
        this.affectedPoints = new Set();
        // 使用Map存储每个点位需要删除的候选数
        this.eliminatedCandidates = new Map();
    }

    /**
     * 添加策略点位
     * @param {StrategyPoint} point - 策略点位
     * @param {number[]} candidates - 相关的候选数
     */
    addPoint(point, candidates) {
        this.points.add(point);
        if (candidates && candidates.length > 0) {
            point.highlightCandidates = candidates;
        }
    }

    /**
     * 添加受影响的点位
     * @param {StrategyPoint} point - 受影响的点位
     * @param {number[]} candidates - 需要删除的候选数
     */
    addAffectedPoint(point, candidates) {
        this.affectedPoints.add(point);
        if (candidates && candidates.length > 0) {
            this.eliminatedCandidates.set(point.toString(), candidates);
        }
    }

    /**
     * 获取所有策略点位
     * @returns {StrategyPoint[]} 策略点位数组
     */
    getPoints() {
        return Array.from(this.points);
    }

    /**
     * 获取所有受影响的点位
     * @returns {StrategyPoint[]} 受影响的点位数组
     */
    getAffectedPoints() {
        return Array.from(this.affectedPoints);
    }

    /**
     * 检查是否有任何变更
     * @returns {boolean} 是否有变更
     */
    hasChanges() {
        return this.points.size > 0 || this.affectedPoints.size > 0;
    }
} 